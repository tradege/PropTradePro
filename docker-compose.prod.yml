version: '3.8'

services:
  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: proptradepro-backend
    restart: unless-stopped
    env_file:
      - .env.production
    ports:
      - "5000:5000"
    depends_on:
      - redis
    networks:
      - proptradepro-network
    command: gunicorn -w 4 -b 0.0.0.0:5000 --access-logfile - --error-logfile - "src.app:create_app()"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: proptradepro-frontend
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    networks:
      - proptradepro-network
    volumes:
      - ./ssl:/etc/nginx/ssl:ro  # Mount SSL certificates
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache (if not using managed Redis)
  redis:
    image: redis:7-alpine
    container_name: proptradepro-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-changeme}
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - proptradepro-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

volumes:
  redis_data:

networks:
  proptradepro-network:
    driver: bridge

# Production Notes:
# 1. Use managed PostgreSQL instead of Docker container
# 2. Use managed Redis for better reliability (optional)
# 3. Setup SSL certificates in ./ssl directory
# 4. Configure environment variables in .env.production
# 5. Setup reverse proxy (Nginx) on host for SSL termination
# 6. Enable firewall and only expose necessary ports
# 7. Setup monitoring and logging
# 8. Configure automated backups

